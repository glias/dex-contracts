// Generated by Molecule 0.4.1

use super::basic::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct OrderBookCellDataMol(molecule::bytes::Bytes);
impl ::std::fmt::Debug for OrderBookCellDataMol {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        write!(
            f,
            "{}(0x{})",
            Self::NAME,
            hex_string(self.as_slice()).unwrap()
        )
    }
}
impl ::std::fmt::Display for OrderBookCellDataMol {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "sudt_amount", self.sudt_amount())?;
        write!(f, ", {}: {}", "order_amount", self.order_amount())?;
        write!(f, ", {}: {}", "price", self.price())?;
        write!(f, ", {}: {}", "order_type", self.order_type())?;
        write!(f, " }}")
    }
}
impl ::std::default::Default for OrderBookCellDataMol {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        OrderBookCellDataMol::new_unchecked(v.into())
    }
}
impl OrderBookCellDataMol {
    pub const FIELD_COUNT: usize = 4;
    pub const FIELD_SIZE: [usize; 4] = [16, 16, 16, 1];
    pub const TOTAL_SIZE: usize = 49;

    pub fn sudt_amount(&self) -> Uint128 {
        Uint128::new_unchecked(self.0.slice(0, 16))
    }

    pub fn order_amount(&self) -> Uint128 {
        Uint128::new_unchecked(self.0.slice(16, 32))
    }

    pub fn price(&self) -> Uint128 {
        Uint128::new_unchecked(self.0.slice(32, 48))
    }

    pub fn order_type(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(48, 49))
    }

    pub fn as_reader<'r>(&'r self) -> OrderBookCellDataMolReader<'r> {
        OrderBookCellDataMolReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for OrderBookCellDataMol {
    type Builder = OrderBookCellDataMolBuilder;

    const NAME: &'static str = "OrderBookCellDataMol";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        OrderBookCellDataMol(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        OrderBookCellDataMolReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        OrderBookCellDataMolReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::std::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .sudt_amount(self.sudt_amount())
            .order_amount(self.order_amount())
            .price(self.price())
            .order_type(self.order_type())
    }
}
#[derive(Clone, Copy)]
pub struct OrderBookCellDataMolReader<'r>(&'r [u8]);
impl<'r> ::std::fmt::Debug for OrderBookCellDataMolReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        use molecule::faster_hex::hex_string;
        write!(
            f,
            "{}(0x{})",
            Self::NAME,
            hex_string(self.as_slice()).unwrap()
        )
    }
}
impl<'r> ::std::fmt::Display for OrderBookCellDataMolReader<'r> {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "sudt_amount", self.sudt_amount())?;
        write!(f, ", {}: {}", "order_amount", self.order_amount())?;
        write!(f, ", {}: {}", "price", self.price())?;
        write!(f, ", {}: {}", "order_type", self.order_type())?;
        write!(f, " }}")
    }
}
impl<'r> OrderBookCellDataMolReader<'r> {
    pub const FIELD_COUNT: usize = 4;
    pub const FIELD_SIZE: [usize; 4] = [16, 16, 16, 1];
    pub const TOTAL_SIZE: usize = 49;

    pub fn sudt_amount(&self) -> Uint128Reader<'r> {
        Uint128Reader::new_unchecked(&self.as_slice()[0..16])
    }

    pub fn order_amount(&self) -> Uint128Reader<'r> {
        Uint128Reader::new_unchecked(&self.as_slice()[16..32])
    }

    pub fn price(&self) -> Uint128Reader<'r> {
        Uint128Reader::new_unchecked(&self.as_slice()[32..48])
    }

    pub fn order_type(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[48..49])
    }
}
impl<'r> molecule::prelude::Reader<'r> for OrderBookCellDataMolReader<'r> {
    type Entity = OrderBookCellDataMol;

    const NAME: &'static str = "OrderBookCellDataMolReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        OrderBookCellDataMolReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len)?;
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct OrderBookCellDataMolBuilder {
    pub(crate) sudt_amount:  Uint128,
    pub(crate) order_amount: Uint128,
    pub(crate) price:        Uint128,
    pub(crate) order_type:   Byte,
}
impl OrderBookCellDataMolBuilder {
    pub const FIELD_COUNT: usize = 4;
    pub const FIELD_SIZE: [usize; 4] = [16, 16, 16, 1];
    pub const TOTAL_SIZE: usize = 49;

    pub fn sudt_amount(mut self, v: Uint128) -> Self {
        self.sudt_amount = v;
        self
    }

    pub fn order_amount(mut self, v: Uint128) -> Self {
        self.order_amount = v;
        self
    }

    pub fn price(mut self, v: Uint128) -> Self {
        self.price = v;
        self
    }

    pub fn order_type(mut self, v: Byte) -> Self {
        self.order_type = v;
        self
    }
}
impl molecule::prelude::Builder for OrderBookCellDataMolBuilder {
    type Entity = OrderBookCellDataMol;

    const NAME: &'static str = "OrderBookCellDataMolBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: ::std::io::Write>(&self, writer: &mut W) -> ::std::io::Result<()> {
        writer.write_all(self.sudt_amount.as_slice())?;
        writer.write_all(self.order_amount.as_slice())?;
        writer.write_all(self.price.as_slice())?;
        writer.write_all(self.order_type.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        OrderBookCellDataMol::new_unchecked(inner.into())
    }
}
